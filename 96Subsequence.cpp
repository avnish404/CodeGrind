#include <bits/stdc++.h>

void solve(string str, string output, vector<string> &ans, int index)
{
    // Base case
    if (index >= str.length())
    {
        if (output.length() > 0)
        {
            ans.push_back(output);
        }
        return;
    }

    // Exclusion call over str
    solve(str, output, ans, index + 1);

    // Inclusion call over str
    char elem = str[index];
    output.push_back(elem);
    solve(str, output, ans, index + 1);
}
vector<string> subsequences(string str)
{

    // Write your code here
    string output = "";
    vector<string> ans;
    int index = 0;

    solve(str, output, ans, index);

    return ans;
}

/*


Problem statement
You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <=  |STR| <= 16

Where |STR| represents the length of the string 'STR'.

Time Limit: 1 sec
Sample Input 1:
1
abc
Sample Output 1:
a ab abc ac b bc c
Explanation of sample input 1:
All possible subsequences of abc are :
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
Sample Input 2:
1
bbb
Sample Output 2:
b b b bb bb bb bbb


*/